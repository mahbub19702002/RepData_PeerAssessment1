library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(lattice)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(datasets)
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("stringi", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("stringr", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
getOption("repos")
options(repos = c(CRAN = "https://cran.rstudio.org"))
setwd('../Desktop/ERDC Data Science/Johns Hopkins Univertisy/5. Reproducible Research/RepData_PeerAssessment1/')
library(ggplot2)
# Extract the .csv file from the zipped file
activity <- read.csv(unz('activity.zip', 'activity.csv'), header = TRUE)
# Remove all rows with NA values
activity <- na.omit(activity)
activity$date <- as.Date(activity$date)
# Calculate the total number of steps taken
total_df <- aggregate(activity$steps, by=list(activity$date), sum)
colnames(total_df) <- c('Date', 'Total Steps')
# Create a histogram from the aggregate data
ggplot(data = total_df, aes(total_df$`Total Steps`)) + geom_histogram(col = 'red', fill = 'green', alpha = 0.2) + labs(title = 'Total Number of Steps Taken Per Day') + labs(x = 'Total Steps per Day', y = 'Number of Days') + ylim(c(0, 10))
mean_steps = mean(total_df$`Total Steps`, na.rm = TRUE)
median_steps = median(total_df$`Total Steps`, na.rm = TRUE)
install.packages("ggplot2")
library(ggplot2)
# Change current working directory to the directory containing the zipped data file
#setwd("../Desktop/ERDC Data Science/Johns Hopkins Univertisy/5. Reproducible Research/RepData_PeerAssessment1/")
# Extract the .csv file from the zipped file
activity <- read.csv(unz('activity.zip', 'activity.csv'), header = TRUE)
# Remove all rows with NA values
activity <- na.omit(activity)
# Convert the 'date' column from 'Factor' type into 'Date' type column
activity$date <- as.Date(activity$date)
# Calculate the total number of steps taken
total_df <- aggregate(activity$steps, by=list(activity$date), sum)
colnames(total_df) <- c('Date', 'Total Steps')
# Create a histogram from the aggregate data
ggplot(data = total_df, aes(total_df$`Total Steps`)) + geom_histogram(col = 'red', fill = 'green', alpha = 0.2) + labs(title = 'Total Number of Steps Taken Per Day') + labs(x = 'Total Steps per Day', y = 'Number of Days') + ylim(c(0, 10))
mean_steps = mean(total_df$`Total Steps`, na.rm = TRUE)
median_steps = median(total_df$`Total Steps`, na.rm = TRUE)
##
mean_df <- aggregate(activity$steps, by=list(activity$interval), mean)
colnames(mean_df) <- c('Interval', 'Mean Steps')
ggplot(mean_df, aes(x = mean_df$Interval, y = mean_df$`Mean Steps`)) + geom_line(col = 'blue', size = 1) + labs(title = 'Time Series of the Mean Number of Steps') + labs(x = 'Number of 5-Minute Intervals', y = 'Mean Number of Steps') + ylim(c(0, 250))
maximum_average = mean_df[which.max(mean_df$`Mean Steps`),]
maximum_average[,'Interval']
# Extract the .csv file from the zipped file
activity_orig <- read.csv(unz('activity.zip', 'activity.csv'), header = TRUE)
# Remove all rows with NA values
activity_no_na <- na.omit(activity)
# Number of rows with NA values
number_of_NA_rows <- nrow(activity_orig) - nrow(activity_no_na)
# Replace NA values in the original data frame with mean values
activity_orig$date <- as.Date(activity_orig$date)
# Get the average number of steps over the whole period of the experiment
mean_steps_to_replace <- mean(activity_orig$steps, na.rm = TRUE)
# Replace the NA values with the mean value for that day
activity_orig$steps <- ifelse(is.na(activity_orig$steps) == TRUE, mean_steps_to_replace, activity_orig$steps)
# Calculate the total number of steps taken
total_imputed_df <- aggregate(activity_orig$steps, by=list(activity_orig$date), sum)
colnames(total_imputed_df) <- c('Date', 'Total Steps')
# Create a histogram from the aggregate data
ggplot(data = total_imputed_df, aes(total_imputed_df$`Total Steps`)) + geom_histogram(col = 'red', fill = 'green', alpha = 0.2) + labs(title = 'Total Number of Steps Taken Per Day') + labs(x = 'Total Steps per Day', y = 'Number of Days') + ylim(c(0, 10))
mean_imputed_steps = mean(total_imputed_df$`Total Steps`)
median_imputed_steps = median(total_imputed_df$`Total Steps`)
daytype <- function(date) {
day <- weekdays(date)
day_type <- ifelse( day %in% c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') == TRUE, 'weekday', 'weekend')
return (day_type)
}
activity_orig$day <- sapply(activity_orig$date, FUN = daytype)
avg_imputed_df <- aggregate(steps ~ interval + day, data = activity_orig, mean)
ggplot(avg_imputed_df, aes(interval, steps)) + geom_line(col = 'red', size = 1) + facet_grid(day ~ .) + labs(title = 'Time Series of the Mean Number of Steps') + labs(x = 'Number of 5-Minute Intervals', y = 'Mean Number of Steps') + ylim(c(0, 250))
getwd()
mean_df <- aggregate(activity$steps, by=list(activity$interval), mean)
colnames(mean_df) <- c('Interval', 'Mean Steps')
ggplot(mean_df, aes(x = mean_df$Interval, y = mean_df$`Mean Steps`)) + geom_line(col = 'blue', size = 1) + labs(title = 'Time Series of the Mean Number of Steps') + labs(x = 'Number of 5-Minute Intervals', y = 'Mean Number of Steps') + ylim(c(0, 250))
maximum_average = mean_df[which.max(mean_df$`Mean Steps`),]
maximum_average[,'Interval']
mean_df <- aggregate(activity$steps, by=list(activity$interval), mean)
colnames(mean_df) <- c('Interval', 'Mean Steps')
ggplot(mean_df, aes(x = mean_df$Interval, y = mean_df$`Mean Steps`)) + geom_line(col = 'blue', size = 1) + labs(title = 'Time Series of the Mean Number of Steps') + labs(x = 'Number of 5-Minute Intervals', y = 'Mean Number of Steps') + ylim(c(0, 250))
maximum_average = mean_df[which.max(mean_df$`Mean Steps`),]
maximum_average
mean_df <- aggregate(activity$steps, by=list(activity$interval), mean)
colnames(mean_df) <- c('Interval', 'Mean Steps')
ggplot(mean_df, aes(x = mean_df$Interval, y = mean_df$`Mean Steps`)) + geom_line(col = 'blue', size = 1) + labs(title = 'Time Series of the Mean Number of Steps') + labs(x = 'Number of 5-Minute Intervals', y = 'Mean Number of Steps') + ylim(c(0, 250))
maximum_average = mean_df[which.max(mean_df$`Mean Steps`),]
maximum_average[,'Interval']
maximum_average[,'Mean Steps']
ggplot(data = total_df, aes(total_df$`Total Steps`)) + geom_histogram(binwidth = 1000, col = 'red', fill = 'green', alpha = 0.2) + labs(title = 'Total Number of Steps Taken Per Day') + labs(x = 'Total Steps per Day', y = 'Number of Days') + ylim(c(0, 10))
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
## ------------------------------------------------------------------------
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
averages[which.max(averages$steps),]
## ----how_many_missing----------------------------------------------------
missing <- is.na(data$steps)
# How many missing
table(missing)
## ------------------------------------------------------------------------
# Replace each missing value with the mean value of its 5-minute interval
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
## ------------------------------------------------------------------------
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
